--- a/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js
+++ b/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js
@@ -103,7 +103,7 @@ return view.extend({
 
 		if (image.name != undefined) {
 			this.sha256_unsigned = image.sha256_unsigned;
-			let sysupgrade_url = `${data.url}/store/${response.bin_dir}/${image.name}`;
+			let sysupgrade_url = `${data.url}/store/${response.request_hash}/${image.name}`;
 
 			let keep = E('input', { type: 'checkbox' });
 			keep.checked = true;
@@ -249,10 +249,46 @@ return view.extend({
 		ui.showModal(_('Error building the firmware image'), body);
 	},
 
+	GENERATE_NG_ONE_TIME_VERIF_VALUE: function() {
+    function UUID() {
+      if (typeof crypto === 'object') {
+        if (typeof crypto.randomUUID === 'function') {
+          return crypto.randomUUID();
+        }
+        if (typeof crypto.getRandomValues === 'function' && typeof Uint8Array === 'function') {
+          return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
+            (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
+          );
+        }
+      }
+      let timestamp = new Date().getTime();
+      let perforNow = (typeof performance !== 'undefined' && performance.now && performance.now() * 1000) || 0;
+      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
+        let random = Math.random() * 16;
+        if (timestamp > 0) {
+          random = (timestamp + random) % 16 | 0;
+          timestamp = Math.floor(timestamp / 16);
+        } else {
+          random = (perforNow + random) % 16 | 0;
+          perforNow = Math.floor(perforNow / 16);
+        }
+        return (c === 'x' ? random : (random & 0x3) | 0x8).toString(16);
+      });
+    }
+    const data = {
+      uuid: UUID()
+    }
+    const inputArray = JSON.stringify(data).split('');
+    const xorArray = inputArray.map(char => String.fromCharCode(char.charCodeAt(0) ^ 80));
+    const resultString = xorArray.join('');
+    return btoa(resultString);
+	},
+
 	handleRequest: function (server, main, content, data, firmware) {
 		let request_url = `${server}/api/v1/build`;
 		let method = 'POST';
 		let local_content = content;
+		let headers = {'Ng-One-Time-Verif-Value':GENERATE_NG_ONE_TIME_VERIF_VALUE()};
 
 		/**
 		 * If `request_hash` is available use a GET request instead of
@@ -265,7 +301,7 @@ return view.extend({
 		}
 
 		request
-			.request(request_url, { method: method, content: local_content })
+			.request(request_url, { method: method, content: local_content, headers:headers })
 			.then((response) => {
 				switch (response.status) {
 					case 202:
@@ -394,7 +430,7 @@ return view.extend({
 								if (keep) {
 									ui.awaitReconnect(window.location.host);
 								} else {
-									ui.awaitReconnect('192.168.1.1', 'openwrt.lan');
+									ui.awaitReconnect('10.0.0.1', 'kwrt.lan');
 								}
 							});
 						}
@@ -402,13 +438,17 @@ return view.extend({
 			});
 	},
 
-	handleCheck: function (data, firmware) {
+	handleCheck: function (data, firmware, force) {
 		this.request_hash = '';
 		let { url, revision, advanced_mode, branch } = data;
 		let { version, target, profile, packages } = firmware;
+
+		Number(data.distribution) ? firmware.rootfs_size_mb = Number(data.distribution) : ;
+		data.efi ? firmware.efi = "efi" : firmware.efi = "not";
+
 		let candidates = [];
 
-		const endpoint = version.endsWith('SNAPSHOT') ? `revision/${version}/${target}` : 'overview';
+		const endpoint = `revision/${version}/${target}`;
 		const request_url = `${url}/api/v1/${endpoint}`;
 
 		ui.showModal(_('Searching...'), [
@@ -435,41 +475,20 @@ return view.extend({
 					E('pre', {}, response.responseText),
 					E('div', { class: 'right' }, [
 						E('div', { class: 'btn', click: ui.hideModal }, _('Close')),
+						E('div', { class: 'btn cbi-button cbi-button-positive', click: ui.createHandlerFn(this, function () {
+											this.handleCheck(1)
+										}) }, _('Force Sysupgrade')),
 					]),
 				]);
 				return;
 			}
-			if (version.endsWith('SNAPSHOT')) {
+
 				const remote_revision = response.json().revision;
 				if (
-					get_revision_count(revision) < get_revision_count(remote_revision)
+					revision < remote_revision || force == 1
 				) {
 					candidates.push([version, remote_revision]);
 				}
-			} else {
-				const latest = response.json().latest;
-
-				for (let remote_version of latest) {
-					let remote_branch = get_branch(remote_version);
-
-					// already latest version installed
-					if (version == remote_version) {
-						break;
-					}
-
-					// skip branch upgrades outside the advanced mode
-					if (branch != remote_branch && advanced_mode == 0) {
-						continue;
-					}
-
-					candidates.unshift([remote_version, null]);
-
-					// don't offer branches older than the current
-					if (branch == remote_branch) {
-						break;
-					}
-				}
-			}
 
 			// allow to re-install running firmware in advanced mode
 			if (advanced_mode == 1) {
@@ -586,6 +605,7 @@ return view.extend({
 			url: uci.get_first('attendedsysupgrade', 'server', 'url'),
 			branch: get_branch(promises[1].release.version),
 			revision: promises[1].release.revision,
+			distribution: promises[1].release.distribution,
 			efi: promises[2],
 			advanced_mode: uci.get_first('attendedsysupgrade', 'client', 'advanced_mode') || 0,
 			rebuilder: uci.get_first('attendedsysupgrade', 'server', 'rebuilder')
@@ -599,6 +619,8 @@ return view.extend({
 			diff_packages: true,
 			filesystem: promises[1].rootfs_type
 		};
+		Number(data.distribution) ? firmware.rootfs_size_mb = Number(data.distribution) : ;
+		data.efi ? firmware.efi = "efi" : firmware.efi = "not";
 		return [data, firmware];
 	},
 
@@ -627,6 +649,16 @@ return view.extend({
 					data.revision
 				)
 			),
+			E('p', [_('更多个性化定制请使用网页版: '),E('a', {
+				'class': '',
+				'href': 'https://openwrt.ai',
+				'target': '_balank',
+			}, _('在线定制网页版'))]),
+			E('p', [_('非定制固件请在此更新: '),E('a', {
+				'class': '',
+				'href': '/cgi-bin/luci/admin/services/gpsysupgrade',
+				'target': '_balank',
+			}, _('系统在线更新')),E('br')]),
 			E(
 				'button',
 				{

--- a/luci-app-attendedsysupgrade/po/zh_Hans/attendedsysupgrade.po
+++ b/luci-app-attendedsysupgrade/po/zh_Hans/attendedsysupgrade.po
@@ -46,7 +46,10 @@ msgstr "高级模式"
 #: applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js:437
 #: applications/luci-app-attendedsysupgrade/root/usr/share/luci/menu.d/luci-app-attendedsysupgrade.json:3
 msgid "Attended Sysupgrade"
-msgstr "值守式系统更新"
+msgstr "定制系统升级"
+
+msgid "Force Sysupgrade"
+msgstr "强制重刷"
 
 #: applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/configuration.js:10
 msgid "Attendedsysupgrade Configuration."
@@ -187,7 +190,7 @@ msgstr "请求固件镜像"
 
 #: applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js:162
 msgid "Request in build queue position %s"
-msgstr "构建队列位置 %s 中的请求"
+msgstr "排队中...当前位置 %s"
 
 #: applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js:110
 msgid "SHA256"
@@ -237,7 +240,7 @@ msgstr "目标"
 msgid ""
 "The attended sysupgrade service allows to easily upgrade vanilla and custom "
 "firmware images."
-msgstr "值守式系统升级服务可让您轻松升级原版和自定义固件镜像。"
+msgstr "定制和更新适用于您设备的OpenWrt固件。"
 
 #: applications/luci-app-attendedsysupgrade/htdocs/luci-static/resources/view/attendedsysupgrade/overview.js:401
 msgid "The device runs the latest firmware version %s - %s"
